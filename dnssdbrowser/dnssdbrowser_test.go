package dnssdbrowser

import (
	"reflect"
	"testing"

	"github.com/miekg/dns"
)

func assertEqual(t *testing.T, a, b interface{}) {
	if !reflect.DeepEqual(a, b) {
		t.Errorf("%q != %q", a, b)
	}
}

func TestServices(t *testing.T) {
	browser := NewBrowser()
	data := []string{
		"\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\vMacBook Pro\v_theservice\x04_tcp\x05local\x00\x00\xff\x80\x01\xc0\f\x00!\x00\x01\x00\x00\x00x\x00\x14\x00\x00\x00\x00\x15\xb5\vMacBook-Pro\xc0)",
		"\x00\x00\x84\x00\x00\x00\x00\x05\x00\x00\x00\x05\vMacBook Pro\f_device-info\x04_tcp\x05local\x00\x00\x10\x00\x01\x00\x00\x11\x94\x00)\x14model=MacBookPro18,3\nosxvers=23\bicolor=2\vMacBook Pro\v_theservice\xc0%\x00\x10\x80\x01\x00\x00\x11\x94\x00\x01\x00\t_services\a_dns-sd\x04_udp\xc0*\x00\f\x00\x01\x00\x00\x11\x94\x00\x02\xc0p\xc0p\x00\f\x00\x01\x00\x00\x11\x94\x00\x02\xc0d\xc0d\x00!\x80\x01\x00\x00\x00x\x00\x14\x00\x00\x00\x00\x15\xb5\vMacBook-Pro\xc0*\xc0\xce\x00\x1c\x80\x01\x00\x00\x00x\x00\x10\xfe\x80\x00\x00\x00\x00\x00\x00\x1c\xae{\xb3\x15\x97\x80\xd9\xc0\xce\x00\x1c\x80\x01\x00\x00\x00x\x00\x10\xfd\xdc\b\xc6K\x99\x00\x00\x00\x11>\x86\xf0r@\xa4\xc0\xce\x00\x01\x80\x01\x00\x00\x00x\x00\x04\xc0\xa8\x01\x8e\xc0\xce\x00/\x80\x01\x00\x00\x00x\x00\b\xc0\xce\x00\x04@\x00\x00\b\xc0d\x00/\x80\x01\x00\x00\x11\x94\x00\t\xc0d\x00\x05\x00\x00\x80\x00@",
	}
	for _, d := range data {
		dnsMsg := &dns.Msg{}
		err := dnsMsg.Unpack([]byte(d))
		if err != nil {
			t.Errorf("Error unpacking: %s", err)
		}
		browser.handlePacket(dnsMsg)
	}

	svc := browser.Services("_theservice._tcp.local.")[0]
	assertEqual(t, svc.Hostname, "MacBook-Pro.local.")
	assertEqual(t, svc.Port, uint16(5557))

	// This seems wrong? Shouldn't it be "MacBook Pro"?
	assertEqual(t, svc.InstanceName, "MacBook\\ Pro._theservice._tcp.local.")
}
